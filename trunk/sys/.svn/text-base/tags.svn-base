!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATOMIC_INIT	atomic.h	38;"	d
BUFFER_SIZE	warningBuffer.h	/^      static const uint32_t BUFFER_SIZE = 64;$/;"	m	class:maasys::WarningBuffer
CLogger	log.cpp	/^CLogger::CLogger() {$/;"	f	class:maasys::CLogger
CLogger	log.h	/^class	CLogger {$/;"	c	namespace:maasys
INVALID_THREAD_KEY	warningBuffer.h	/^      static const pthread_key_t INVALID_THREAD_KEY = ((uint32_t)-1);\/\/UINT32_MAX;;$/;"	m	class:maasys::WarningBufferFactory
LOCK	atomic.h	29;"	d
LOG_FILE_MODE	log.h	/^	static const mode_t LOG_FILE_MODE = 0644;$/;"	m	class:maasys::CLogger
MAASYS_ATOMIC_H	atomic.h	22;"	d
MAASYS_DEFAULT_RUNNABLE_H_	defaultrunnable.h	2;"	d
MAASYS_H_	maasys.h	2;"	d
MAASYS_LOG	log.h	30;"	d
MAASYS_LOGGER	log.h	27;"	d
MAASYS_LOG_BASE	log.h	29;"	d
MAASYS_LOG_H	log.h	2;"	d
MAASYS_LOG_LEVEL	log.h	25;"	d
MAASYS_LOG_LEVEL_DEBUG	log.h	24;"	d
MAASYS_LOG_LEVEL_ERROR	log.h	19;"	d
MAASYS_LOG_LEVEL_INFO	log.h	22;"	d
MAASYS_LOG_LEVEL_TRACE	log.h	23;"	d
MAASYS_LOG_LEVEL_USER_ERROR	log.h	20;"	d
MAASYS_LOG_LEVEL_WARN	log.h	21;"	d
MAASYS_LOG_NUM_LEVEL	log.h	26;"	d
MAASYS_LOG_US	log.h	31;"	d
MAASYS_NETUTIL_H_	netutil.h	2;"	d
MAASYS_PARAMTER_H_	parameter.h	2;"	d
MAASYS_PRINT	log.h	28;"	d
MAASYS_RUNNABLE_H_	runnable.h	2;"	d
MAASYS_THREADCOND_H_	threadcond.h	2;"	d
MAASYS_THREADMUTEX_H_	threadmutex.h	2;"	d
MAASYS_THREAD_H_	thread.h	2;"	d
MAASYS_TIMEUTIL_H_	timeutil.h	2;"	d
MAASYS_WARNING_BUFFER_H_	warningBuffer.h	2;"	d
NEWLINE	log.cpp	/^  static  char NEWLINE[1] = {'\\n'};$/;"	m	namespace:maasys	file:
STR_LEN	warningBuffer.h	/^        static const uint32_t STR_LEN = 512;$/;"	m	struct:maasys::WarningBuffer::WarningItem
SYSPARAM_CONF	parameter.h	22;"	d
UNUSED	maasys.h	19;"	d
WarningBuffer	warningBuffer.h	/^      	WarningBuffer() : append_idx_(0), total_warning_count_(0){$/;"	f	class:maasys::WarningBuffer
WarningBuffer	warningBuffer.h	/^class WarningBuffer {$/;"	c	namespace:maasys
WarningBufferFactory	warningBuffer.h	/^	WarningBufferFactory() : key_(INVALID_THREAD_KEY){$/;"	f	class:maasys::WarningBufferFactory
WarningBufferFactory	warningBuffer.h	/^class WarningBufferFactory {$/;"	c	namespace:maasys
WarningItem	warningBuffer.h	/^      	struct WarningItem{$/;"	s	class:maasys::WarningBuffer
_check	log.h	/^	int _check;$/;"	m	class:maasys::CLogger
_cond	threadcond.h	/^    	pthread_cond_t _cond;$/;"	m	class:maasys::threadCond
_errstr	log.cpp	/^const char * const CLogger::_errstr[] = {"ERROR","USER_ERR","WARN","INFO","TRACE","DEBUG"};$/;"	m	class:maasys::CLogger	file:
_errstr	log.h	/^	static const char *const _errstr[];$/;"	m	class:maasys::CLogger
_fd	log.h	/^    	int _fd;$/;"	m	class:maasys::CLogger
_fileIndexMutex	log.h	/^	pthread_mutex_t _fileIndexMutex;$/;"	m	class:maasys::CLogger
_fileList	log.h	/^	std::deque<std::string> _fileList;$/;"	m	class:maasys::CLogger
_fileSizeMutex	log.h	/^	pthread_mutex_t _fileSizeMutex;$/;"	m	class:maasys::CLogger
_flag	log.h	/^	bool _flag;$/;"	m	class:maasys::CLogger
_instance	parameter.cpp	/^	sysParam sysParam::_instance;	$/;"	m	class:maasys::sysParam	file:
_instance	parameter.h	/^	static sysParam _instance;$/;"	m	class:maasys::sysParam
_level	log.h	/^	int _level;$/;"	m	class:maasys::CLogger
_maxFileIndex	log.h	/^	size_t _maxFileIndex;$/;"	m	class:maasys::CLogger
_maxFileSize	log.h	/^	int64_t _maxFileSize;$/;"	m	class:maasys::CLogger
_mutex	threadmutex.h	/^	pthread_mutex_t _mutex;	$/;"	m	class:maasys::threadMutex
_mutex	threadmutex.h	/^    	threadMutex *_mutex;$/;"	m	class:maasys::threadGuard
_name	log.h	/^	char *_name;$/;"	m	class:maasys::CLogger
_runnable	thread.h	/^    runnable *_runnable;$/;"	m	class:maasys::cThread
_stop	defaultrunnable.h	/^    	bool _stop;$/;"	m	class:maasys::defaultRunnable
_thread	defaultrunnable.h	/^    	cThread *_thread;$/;"	m	class:maasys::defaultRunnable
_threadCount	defaultrunnable.h	/^    	int _threadCount;$/;"	m	class:maasys::defaultRunnable
_wf_fd	log.h	/^    	int _wf_fd;$/;"	m	class:maasys::CLogger
_wf_file_list	log.h	/^	std::deque<std::string> _wf_file_list;$/;"	m	class:maasys::CLogger
_wf_flag	log.h	/^	bool _wf_flag;$/;"	m	class:maasys::CLogger
_wf_level	log.h	/^	int _wf_level;$/;"	m	class:maasys::CLogger
addrToString	netutil.cpp	/^string netUtil::addrToString(uint64_t ipport)$/;"	f	class:maasys::netUtil
append_idx_	warningBuffer.h	/^      uint32_t append_idx_;$/;"	m	class:maasys::WarningBuffer
append_warning	warningBuffer.h	/^	int append_warning(const char *str){$/;"	f	class:maasys::WarningBuffer
args	thread.h	/^    void *args;$/;"	m	class:maasys::cThread
atomic_add	atomic.h	/^static __inline__ void atomic_add(int i, atomic_t *v)$/;"	f
atomic_add_negative	atomic.h	/^static __inline__ int atomic_add_negative(int i, atomic_t *v)$/;"	f
atomic_add_return	atomic.h	/^static __inline__ int atomic_add_return(int i, atomic_t *v)$/;"	f
atomic_clear_mask	atomic.h	220;"	d
atomic_dec	atomic.h	/^static __inline__ void atomic_dec(atomic_t *v)$/;"	f
atomic_dec_and_test	atomic.h	/^static __inline__ int atomic_dec_and_test(atomic_t *v)$/;"	f
atomic_dec_return	atomic.h	229;"	d
atomic_inc	atomic.h	/^static __inline__ void atomic_inc(atomic_t *v)$/;"	f
atomic_inc_and_test	atomic.h	/^static __inline__ int atomic_inc_and_test(atomic_t *v)$/;"	f
atomic_inc_return	atomic.h	228;"	d
atomic_read	atomic.h	46;"	d
atomic_set	atomic.h	55;"	d
atomic_set_mask	atomic.h	224;"	d
atomic_sub	atomic.h	/^static __inline__ void atomic_sub(int i, atomic_t *v)$/;"	f
atomic_sub_and_test	atomic.h	/^static __inline__ int atomic_sub_and_test(int i, atomic_t *v)$/;"	f
atomic_sub_return	atomic.h	/^static __inline__ int atomic_sub_return(int i, atomic_t *v)$/;"	f
atomic_t	atomic.h	/^typedef struct { volatile int counter; } atomic_t;$/;"	t	typeref:struct:__anon1
broadcast	threadcond.h	/^	void broadcast() {$/;"	f	class:maasys::threadCond
cThread	thread.h	/^    cThread() {$/;"	f	class:maasys::cThread
cThread	thread.h	/^class cThread {$/;"	c	namespace:maasys
checkFile	log.cpp	/^void CLogger::checkFile()$/;"	f	class:maasys::CLogger
counter	atomic.h	/^typedef struct { volatile int counter; } atomic_t;$/;"	m	struct:__anon1
create_thread_key	warningBuffer.h	/^      	int create_thread_key(){$/;"	f	class:maasys::WarningBufferFactory
defaultRunnable	defaultrunnable.cpp	/^defaultRunnable::defaultRunnable(int threadCount) {$/;"	f	class:maasys::defaultRunnable
defaultRunnable	defaultrunnable.h	/^class defaultRunnable : public runnable {$/;"	c	namespace:maasys
delete_thread_key	warningBuffer.h	/^      int delete_thread_key()$/;"	f	class:maasys::WarningBufferFactory
destroy_thread_key	warningBuffer.h	/^      static void destroy_thread_key(void* ptr)$/;"	f	class:maasys::WarningBufferFactory
err_msg_	warningBuffer.h	/^      WarningItem err_msg_;$/;"	m	class:maasys::WarningBuffer
get	warningBuffer.h	/^        const char *get() const$/;"	f	struct:maasys::WarningBuffer::WarningItem
getAddr	netutil.cpp	/^uint32_t netUtil::getAddr(const char *ip)$/;"	f	class:maasys::netUtil
getArgs	thread.h	/^    void *getArgs() {$/;"	f	class:maasys::cThread
getLocalAddr	netutil.cpp	/^uint32_t netUtil::getLocalAddr(const char *dev_name)$/;"	f	class:maasys::netUtil
getLogger	log.cpp	/^CLogger::CLogger& CLogger::getLogger()$/;"	f	class:maasys::CLogger
getMonotonicTime	timeutil.cpp	/^int64_t timeUtil::getMonotonicTime() {$/;"	f	class:maasys::timeUtil
getRunnable	thread.h	/^    runnable *getRunnable() {$/;"	f	class:maasys::cThread
getTime	timeutil.cpp	/^int64_t timeUtil::getTime() {$/;"	f	class:maasys::timeUtil
get_buffer	warningBuffer.h	/^      	WarningBuffer* get_buffer() const {$/;"	f	class:maasys::WarningBufferFactory
get_buffer_size	warningBuffer.h	/^	inline uint32_t get_buffer_size(void) const{$/;"	f	class:maasys::WarningBuffer
get_cur_tv	log.h	/^    	static inline struct timeval get_cur_tv(){$/;"	f	class:maasys::CLogger
get_err_msg	warningBuffer.h	/^	const char* get_err_msg() const{$/;"	f	class:maasys::WarningBuffer
get_max_warn_len	warningBuffer.h	/^	inline uint32_t get_max_warn_len(void) const{$/;"	f	class:maasys::WarningBuffer
get_readable_warning_count	warningBuffer.h	/^	inline uint32_t get_readable_warning_count(void) const{$/;"	f	class:maasys::WarningBuffer
get_total_warning_count	warningBuffer.h	/^	inline uint32_t get_total_warning_count(void) const{$/;"	f	class:maasys::WarningBuffer
get_tsi_warning_buffer	warningBuffer.cpp	/^WarningBuffer *get_tsi_warning_buffer() {$/;"	f	namespace:maasys
get_warning	warningBuffer.h	/^	const char *get_warning(const uint32_t idx) const{$/;"	f	class:maasys::WarningBuffer
getpid	thread.h	/^    int getpid() {$/;"	f	class:maasys::cThread
hook	thread.h	/^    static void *hook(void *arg) {$/;"	f	class:maasys::cThread
instance	parameter.h	/^	static sysParam& instance() {$/;"	f	class:maasys::sysParam
ipToAddr	netutil.cpp	/^uint64_t netUtil::ipToAddr(uint32_t ip, int port)$/;"	f	class:maasys::netUtil
ipaddr_less	netutil.h	/^struct ipaddr_less {$/;"	s	namespace:maasys
isLocalAddr	netutil.cpp	/^bool netUtil::isLocalAddr(uint32_t ip, bool loopSkip)$/;"	f	class:maasys::netUtil
is_log_on_	warningBuffer.cpp	/^bool WarningBuffer::is_log_on_ = false;$/;"	m	class:maasys::WarningBuffer	file:
is_log_on_	warningBuffer.h	/^      static bool is_log_on_;$/;"	m	class:maasys::WarningBuffer
is_warn_log_on	warningBuffer.h	/^	inline static bool is_warn_log_on(void){$/;"	f	class:maasys::WarningBuffer
item_	warningBuffer.h	/^      WarningItem item_[BUFFER_SIZE];$/;"	m	class:maasys::WarningBuffer
join	thread.h	/^    void join() {$/;"	f	class:maasys::cThread
key_	warningBuffer.h	/^      pthread_key_t key_;$/;"	m	class:maasys::WarningBufferFactory
line_no_	warningBuffer.h	/^        int line_no_;$/;"	m	struct:maasys::WarningBuffer::WarningItem
lock	threadmutex.h	/^	void lock() {$/;"	f	class:maasys::threadMutex
logMessage	log.cpp	/^void CLogger::logMessage(int level,const char *file, int line, const char *function, pthread_t tid, const char *fmt, ...) {$/;"	f	class:maasys::CLogger
log_level_	warningBuffer.h	/^        int log_level_;$/;"	m	struct:maasys::WarningBuffer::WarningItem
maasys	defaultrunnable.cpp	/^namespace maasys {$/;"	n	file:
maasys	defaultrunnable.h	/^namespace maasys {$/;"	n
maasys	log.cpp	/^namespace maasys$/;"	n	file:
maasys	log.h	/^namespace maasys {$/;"	n
maasys	maasys.h	/^namespace maasys$/;"	n
maasys	netutil.cpp	/^namespace maasys {$/;"	n	file:
maasys	netutil.h	/^namespace maasys {$/;"	n
maasys	parameter.cpp	/^namespace maasys$/;"	n	file:
maasys	parameter.h	/^namespace maasys$/;"	n
maasys	runnable.h	/^namespace maasys$/;"	n
maasys	thread.h	/^namespace maasys$/;"	n
maasys	threadcond.h	/^namespace maasys {$/;"	n
maasys	threadmutex.h	/^namespace maasys $/;"	n
maasys	timeutil.cpp	/^namespace maasys {$/;"	n	file:
maasys	timeutil.h	/^namespace maasys {$/;"	n
maasys	warningBuffer.cpp	/^namespace maasys {$/;"	n	file:
maasys	warningBuffer.h	/^namespace maasys$/;"	n
msg_	warningBuffer.h	/^        char msg_[STR_LEN];$/;"	m	struct:maasys::WarningBuffer::WarningItem
netUtil	netutil.h	/^class netUtil {$/;"	c	namespace:maasys
operator ()	netutil.h	/^    bool operator()(const uint64_t a, const uint64_t b) const {$/;"	f	struct:maasys::ipaddr_less
operator =	warningBuffer.h	/^	WarningBuffer& operator= (const WarningBuffer &other){$/;"	f	class:maasys::WarningBuffer
operator =	warningBuffer.h	/^        WarningItem &operator= (const WarningItem &other)$/;"	f	struct:maasys::WarningBuffer::WarningItem
pid	thread.h	/^    int pid;          $/;"	m	class:maasys::cThread
port	parameter.h	/^		int32_t port;$/;"	m	struct:maasys::sysParam::sysConf
reset	warningBuffer.h	/^	inline void reset(void){$/;"	f	class:maasys::WarningBuffer
rotateLog	log.cpp	/^void CLogger::rotateLog(const char *filename, const char *fmt) $/;"	f	class:maasys::CLogger
runnable	runnable.h	/^class runnable{$/;"	c	namespace:maasys
set	warningBuffer.h	/^        void set(const char*str)$/;"	f	struct:maasys::WarningBuffer::WarningItem
setCheck	log.h	/^    	void setCheck(int v) {_check = v;}$/;"	f	class:maasys::CLogger
setFileName	log.cpp	/^void CLogger::setFileName(const char *filename, bool flag, bool open_wf)$/;"	f	class:maasys::CLogger
setLogLevel	log.cpp	/^void CLogger::setLogLevel(const char *level, const char *wf_level)$/;"	f	class:maasys::CLogger
setMaxFileIndex	log.cpp	/^void CLogger::setMaxFileIndex( int maxFileIndex )$/;"	f	class:maasys::CLogger
setMaxFileSize	log.cpp	/^void CLogger::setMaxFileSize( int64_t maxFileSize)$/;"	f	class:maasys::CLogger
setThreadCount	defaultrunnable.cpp	/^void defaultRunnable::setThreadCount(int threadCount)$/;"	f	class:maasys::defaultRunnable
set_err_msg	warningBuffer.h	/^	void set_err_msg(const char* str){$/;"	f	class:maasys::WarningBuffer
set_warn_log_on	warningBuffer.h	/^	inline static void set_warn_log_on(const bool is_log_on){$/;"	f	class:maasys::WarningBuffer
signal	threadcond.h	/^	void signal() {$/;"	f	class:maasys::threadCond
start	defaultrunnable.cpp	/^int defaultRunnable::start() {$/;"	f	class:maasys::defaultRunnable
start	thread.h	/^    bool start(runnable *r, void *a) {$/;"	f	class:maasys::cThread
stop	defaultrunnable.cpp	/^void defaultRunnable::stop() {$/;"	f	class:maasys::defaultRunnable
strToAddr	netutil.cpp	/^uint64_t netUtil::strToAddr(const char *ip, int port)$/;"	f	class:maasys::netUtil
strToTime	timeutil.cpp	/^int timeUtil::strToTime(char *str)$/;"	f	class:maasys::timeUtil
sysConf	parameter.h	/^	struct sysConf {$/;"	s	class:maasys::sysParam
sysParam	parameter.h	/^class sysParam {$/;"	c	namespace:maasys
sys_conf	parameter.h	/^	sysConf sys_conf;	$/;"	m	class:maasys::sysParam
sysconf	parameter.h	/^	const sysConf& sysconf() const {$/;"	f	class:maasys::sysParam
threadCond	threadcond.h	/^    	threadCond() {$/;"	f	class:maasys::threadCond
threadCond	threadcond.h	/^class threadCond : public threadMutex {$/;"	c	namespace:maasys
threadGuard	threadmutex.h	/^	threadGuard(threadMutex *mutex){$/;"	f	class:maasys::threadGuard
threadGuard	threadmutex.h	/^class threadGuard$/;"	c	namespace:maasys
threadMutex	threadmutex.h	/^	threadMutex() {$/;"	f	class:maasys::threadMutex
threadMutex	threadmutex.h	/^class threadMutex{$/;"	c	namespace:maasys
tid	thread.h	/^    pthread_t tid;     $/;"	m	class:maasys::cThread
timeToStr	timeutil.cpp	/^char *timeUtil::timeToStr(time_t t, char *dest)$/;"	f	class:maasys::timeUtil
timeUtil	timeutil.h	/^class timeUtil {$/;"	c	namespace:maasys
timestamp_	warningBuffer.h	/^        int64_t timestamp_;$/;"	m	struct:maasys::WarningBuffer::WarningItem
total_warning_count_	warningBuffer.h	/^      uint32_t total_warning_count_;$/;"	m	class:maasys::WarningBuffer
tryLock	threadmutex.h	/^	int tryLock() {$/;"	f	class:maasys::threadMutex
unlock	threadmutex.h	/^	void unlock() {$/;"	f	class:maasys::threadMutex
wait	defaultrunnable.cpp	/^void defaultRunnable::wait() {$/;"	f	class:maasys::defaultRunnable
wait	threadcond.h	/^	bool wait(int milliseconds = 0) {$/;"	f	class:maasys::threadCond
~CLogger	log.cpp	/^CLogger::~CLogger() {$/;"	f	class:maasys::CLogger
~WarningBuffer	warningBuffer.h	/^	~WarningBuffer(){$/;"	f	class:maasys::WarningBuffer
~WarningBufferFactory	warningBuffer.h	/^      	~WarningBufferFactory(){$/;"	f	class:maasys::WarningBufferFactory
~defaultRunnable	defaultrunnable.cpp	/^defaultRunnable::~defaultRunnable() {$/;"	f	class:maasys::defaultRunnable
~runnable	runnable.h	/^	virtual ~runnable(){$/;"	f	class:maasys::runnable
~threadCond	threadcond.h	/^	~threadCond() {$/;"	f	class:maasys::threadCond
~threadGuard	threadmutex.h	/^	~threadGuard(){$/;"	f	class:maasys::threadGuard
~threadMutex	threadmutex.h	/^	~threadMutex(){$/;"	f	class:maasys::threadMutex
