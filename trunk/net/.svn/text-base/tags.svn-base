!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLOSE_CHANNEL	packethandler.h	/^        CLOSE_CHANNEL = 1,$/;"	e	enum:maanet::packetHandler::HPRetCode
DefaultPacketStreamer	defaultpacketstreamer.cpp	/^defaultPacketStreamer::DefaultPacketStreamer() {}$/;"	f	class:maanet::defaultPacketStreamer
FREE_CHANNEL	packethandler.h	/^        FREE_CHANNEL  = 2$/;"	e	enum:maanet::packetHandler::HPRetCode
HPRetCode	packethandler.h	/^    enum HPRetCode {$/;"	g	class:maanet::packetHandler
KEEP_CHANNEL	packethandler.h	/^        KEEP_CHANNEL  = 0,$/;"	e	enum:maanet::packetHandler::HPRetCode
MAANET_CLOSED	iocomponent.h	/^		MAANET_CLOSED,$/;"	e	enum:maanet::ioComponent::__anon1
MAANET_CONNECTED	iocomponent.h	/^		MAANET_CONNECTED,$/;"	e	enum:maanet::ioComponent::__anon1
MAANET_CONNECTING	iocomponent.h	/^		MAANET_CONNECTING = 1,	$/;"	e	enum:maanet::ioComponent::__anon1
MAANET_CONNECTION_H_	connection.h	3;"	d
MAANET_DATA_BUFFER_H_	databuffer.h	3;"	d
MAANET_DEFAULT_PACKET_STREAMER_H_	defaultpacketstreamer.h	3;"	d
MAANET_EPOLLSOCKETEVENT_H_	epollsocketevent.h	2;"	d
MAANET_H_	maanet.h	2;"	d
MAANET_IOCOMPONENT_H_	iocomponent.h	2;"	d
MAANET_IPACKETHANDLER_H_	packethandler.h	2;"	d
MAANET_IPACKET_FACTORY_H_	packetfactory.h	3;"	d
MAANET_ISERVERADAPTER_H	serveradapter.h	2;"	d
MAANET_PACKETSTREAMER_H_	packetstreamer.h	2;"	d
MAANET_PACKET_H_	packet.h	2;"	d
MAANET_PACKET_QUEUE_H_	packetqueue.h	3;"	d
MAANET_PACKET_QUEUE_THREAD_H	packetqueuethread.h	2;"	d
MAANET_SERVERSOCKET_H_	serversocket.h	2;"	d
MAANET_SOCKETEVENT_H_	socketevent.h	2;"	d
MAANET_SOCKET_H_	socket.h	2;"	d
MAANET_TCPCOMPONENT_H_	tcpcomponent.h	2;"	d
MAANET_TCPCONNECTION_H_	tcpconnection.h	3;"	d
MAANET_TRANSPORT_H_	transport.h	2;"	d
MAANET_UNCONNECTED	iocomponent.h	/^		MAANET_UNCONNECTED	$/;"	e	enum:maanet::ioComponent::__anon1
MAX_BUFFER_SIZE	databuffer.h	5;"	d
MAX_SOCKET_EVENTS	socketevent.h	6;"	d
READ_WRITE_SIZE	connection.h	5;"	d
Socket	socket.cpp	/^	Socket::Socket(){$/;"	f	class:maanet::Socket
Socket	socket.h	/^class Socket {$/;"	c	namespace:maanet
TBNET_PACKET_FLAG	packet.h	6;"	d
TCPACCEPTER_H_	tcpaccepter.h	2;"	d
UNUSED	connection.h	7;"	d
UNUSED	serveradapter.h	5;"	d
_address	socket.h	/^	struct sockaddr_in _address;$/;"	m	class:maanet::Socket	typeref:struct:maanet::Socket::sockaddr_in
_appTcp	connection.h	/^	bool _appTcp;                   	\/\/app端tcp连接	$/;"	m	class:maanet::connection
_args	packetqueuethread.h	/^	void *_args;$/;"	m	class:maanet::packetQueueThread
_autoReconn	iocomponent.h	/^	bool _autoReconn;$/;"	m	class:maanet::ioComponent
_batchPushPacket	serveradapter.h	/^    	bool _batchPushPacket;          $/;"	m	class:maanet::serverAdapter
_cond	packetqueuethread.h	/^	maasys::threadCond _cond;$/;"	m	class:maanet::packetQueueThread
_connection	tcpcomponent.h	/^	tcpConnection *_connection;$/;"	m	class:maanet::tcpComponent
_defaultPacketHandler	connection.h	/^    	packetHandler *_defaultPacketHandler;  \/\/ connection的默认的packet handler$/;"	m	class:maanet::connection
_delListHead	transport.h	/^	ioComponent *_delListHead, *_delListTail;$/;"	m	class:maanet::transport
_delListTail	transport.h	/^	ioComponent *_delListHead, *_delListTail;$/;"	m	class:maanet::transport
_dnsMutex	socket.cpp	/^	maasys::threadMutex Socket::_dnsMutex;$/;"	m	class:maanet::Socket	file:
_dnsMutex	socket.h	/^	static maasys::threadMutex _dnsMutex; $/;"	m	class:maanet::Socket
_errorEvent	socketevent.h	/^	bool _errorEvent;$/;"	m	class:maanet::ioEvent
_existPacketHeader	packetstreamer.h	/^	bool _existPacketHeader;    $/;"	m	class:maanet::packetStreamer
_expireTime	packet.h	/^    int64_t _expireTime;        \/\/ 到期时间$/;"	m	class:maanet::packet
_factory	packetstreamer.h	/^	packetFactory *_factory;  $/;"	m	class:maanet::packetStreamer
_gotFirst	connection.h	/^    	bool _gotFirst;            		\/\/ 得到第一条指令 	$/;"	m	class:maanet::connection
_gotHeader	tcpconnection.h	/^    	bool _gotHeader;            \/\/ packet header已经取过$/;"	m	class:maanet::tcpConnection
_handler	packetqueuethread.h	/^	packetQueueHandler *_handler;$/;"	m	class:maanet::packetQueueThread
_head	packetqueue.h	/^    packet *_head;  $/;"	m	class:maanet::packetQueue
_iepfd	epollsocketevent.h	/^	int _iepfd;$/;"	m	class:maanet::epollSocketEvent
_inUsed	iocomponent.h	/^	bool _inUsed;$/;"	m	class:maanet::ioComponent
_input	tcpconnection.h	/^    	dataBuffer _input;       \/\/ 读入的buffer$/;"	m	class:maanet::tcpConnection
_inputQueue	connection.h	/^    	packetQueue _inputQueue;                \/\/ 发送队列$/;"	m	class:maanet::connection
_ioc	socketevent.h	/^	ioComponent *_ioc;$/;"	m	class:maanet::ioEvent
_iocListChanged	transport.h	/^	bool _iocListChanged;$/;"	m	class:maanet::transport
_iocListCount	transport.h	/^	int _iocListCount;$/;"	m	class:maanet::transport
_iocListHead	transport.h	/^	ioComponent *_iocListHead, *_iocListTail;$/;"	m	class:maanet::transport
_iocListTail	transport.h	/^	ioComponent *_iocListHead, *_iocListTail;$/;"	m	class:maanet::transport
_iocMutex	transport.h	/^	maasys::threadMutex _iocMutex;$/;"	m	class:maanet::transport
_iocomponent	connection.h	/^	ioComponent *_iocomponent;$/;"	m	class:maanet::connection
_iocomponent	socket.h	/^	ioComponent *_iocomponent;$/;"	m	class:maanet::Socket
_isServer	connection.h	/^	bool _isServer;                         \/\/ 是服务器端$/;"	m	class:maanet::connection
_isServer	iocomponent.h	/^	bool _isServer;$/;"	m	class:maanet::ioComponent
_lastUseTime	iocomponent.h	/^	int64_t _lastUseTime;$/;"	m	class:maanet::ioComponent
_myQueue	connection.h	/^    	packetQueue _myQueue;                   \/\/ 在write中处理时暂时用$/;"	m	class:maanet::connection
_nPacketFlag	defaultpacketstreamer.cpp	/^int defaultPacketStreamer::_nPacketFlag = MAANET_PACKET_FLAG;$/;"	m	class:maanet::defaultPacketStreamer	file:
_nPacketFlag	defaultpacketstreamer.h	/^    static int _nPacketFlag;$/;"	m	class:maanet::defaultPacketStreamer
_next	iocomponent.h	/^	ioComponent *_next;	$/;"	m	class:maanet::ioComponent
_next	packet.h	/^    packet *_next;              \/\/ 用在packetqueue链表$/;"	m	class:maanet::packet
_output	tcpconnection.h	/^    	dataBuffer _output;      \/\/ 输出的buffer$/;"	m	class:maanet::tcpConnection
_outputCond	connection.h	/^    	maasys::threadCond _outputCond;         \/\/ 发送队列的条件变量$/;"	m	class:maanet::connection
_outputQueue	connection.h	/^    	packetQueue _outputQueue;               \/\/ 发送队列$/;"	m	class:maanet::connection
_overage	packetqueuethread.h	/^    	int64_t _overage;$/;"	m	class:maanet::packetQueueThread
_owner	iocomponent.h	/^	transport *_owner;$/;"	m	class:maanet::ioComponent
_packetHeader	packet.h	/^    packetHeader _packetHeader; \/\/ 数据包的头信息$/;"	m	class:maanet::packet
_packetHeader	tcpconnection.h	/^    	packetHeader _packetHeader; \/\/ 读入的packet header$/;"	m	class:maanet::tcpConnection
_pdata	databuffer.h	/^	unsigned char *_pdata;       $/;"	m	class:maanet::dataBuffer
_pend	databuffer.h	/^	unsigned char *_pend;       $/;"	m	class:maanet::dataBuffer
_pfree	databuffer.h	/^	unsigned char *_pfree;        $/;"	m	class:maanet::dataBuffer
_prev	iocomponent.h	/^	ioComponent *_prev;$/;"	m	class:maanet::ioComponent
_pstart	databuffer.h	/^	unsigned char *_pstart;      $/;"	m	class:maanet::dataBuffer
_pushcond	packetqueuethread.h	/^	maasys::threadCond _pushcond;$/;"	m	class:maanet::packetQueueThread
_queue	packetqueuethread.h	/^    	packetQueue _queue;$/;"	m	class:maanet::packetQueueThread
_queueLimit	connection.h	/^    	int _queueLimit;                        \/\/ 队列最长长度, 如果超过这个值post进来就会被wait$/;"	m	class:maanet::connection
_queueTimeout	connection.h	/^    	int _queueTimeout;                      \/\/ 队列超时时间$/;"	m	class:maanet::connection
_queueTotalSize	connection.h	/^    	int _queueTotalSize;                    \/\/ 队列总长度$/;"	m	class:maanet::connection
_readEvent	socketevent.h	/^	bool _readEvent;$/;"	m	class:maanet::ioEvent
_readWriteThread	transport.h	/^	maasys::cThread _readWriteThread;$/;"	m	class:maanet::transport
_refcount	iocomponent.h	/^	atomic_t _refcount;$/;"	m	class:maanet::ioComponent
_serverAdapter	connection.h	/^    	serverAdapter *_serverAdapter;         \/\/ 服务器适配器$/;"	m	class:maanet::connection
_serverAdapter	tcpaccepter.h	/^	serverAdapter *_serverAdapter;	$/;"	m	class:maanet::tcpAccepter
_size	packetqueue.h	/^    int _size;    $/;"	m	class:maanet::packetQueue
_socket	connection.h	/^    	Socket *_socket;                        \/\/ Socket句柄$/;"	m	class:maanet::connection
_socket	iocomponent.h	/^	Socket *_socket;$/;"	m	class:maanet::ioComponent
_socketEvent	iocomponent.h	/^	socketEvent *_socketEvent;$/;"	m	class:maanet::ioComponent
_socketEvent	transport.h	/^	epollSocketEvent _socketEvent;$/;"	m	class:maanet::transport
_socketHandle	socket.h	/^	int _socketHandle;$/;"	m	class:maanet::Socket
_speed_t1	packetqueuethread.h	/^    	int64_t _speed_t1;$/;"	m	class:maanet::packetQueueThread
_speed_t2	packetqueuethread.h	/^    	int64_t _speed_t2;$/;"	m	class:maanet::packetQueueThread
_startConnectTime	tcpcomponent.h	/^	int64_t _startConnectTime;				$/;"	m	class:maanet::tcpComponent
_state	iocomponent.h	/^	int _state;$/;"	m	class:maanet::ioComponent
_stop	transport.h	/^	bool _stop;$/;"	m	class:maanet::transport
_streamer	connection.h	/^    	packetStreamer *_streamer;             \/\/ Packet解析$/;"	m	class:maanet::connection
_streamer	tcpaccepter.h	/^	packetStreamer *_streamer;$/;"	m	class:maanet::tcpAccepter
_tail	packetqueue.h	/^    packet *_tail;  $/;"	m	class:maanet::packetQueue
_timeoutThread	transport.h	/^	maasys::cThread _timeoutThread;$/;"	m	class:maanet::transport
_waitFinish	packetqueuethread.h	/^	bool _waitFinish;      $/;"	m	class:maanet::packetQueueThread
_waitTime	packetqueuethread.h	/^    	int _waitTime;$/;"	m	class:maanet::packetQueueThread
_waiting	packetqueuethread.h	/^    	bool _waiting;$/;"	m	class:maanet::packetQueueThread
_writeEvent	socketevent.h	/^	bool _writeEvent;$/;"	m	class:maanet::ioEvent
_writeFinishClose	tcpconnection.h	/^    	bool _writeFinishClose;     \/\/ 写完断开$/;"	m	class:maanet::tcpConnection
accept	serversocket.cpp	/^	Socket *serverSocket::accept(){$/;"	f	class:maanet::serverSocket
addComponent	transport.cpp	/^	void transport::addComponent(ioComponent *ioc, bool readOn, bool writeOn) {$/;"	f	class:maanet::transport
addEvent	epollsocketevent.cpp	/^	bool epollSocketEvent::addEvent(Socket *socket, bool enableRead, bool enableWrite) {$/;"	f	class:maanet::epollSocketEvent
addRef	iocomponent.h	/^	int addRef() {$/;"	f	class:maanet::ioComponent
appID	connection.h	/^    	int appID;               		\/\/ app ID$/;"	m	class:maanet::connection
appID	packet.h	/^	uint32_t appID;		\/\/APPID$/;"	m	class:maanet::packetHeader
backLog	serversocket.h	/^	int backLog;	$/;"	m	class:maanet::serverSocket
checkSendSpeed	packetqueuethread.cpp	/^void packetQueueThread::checkSendSpeed() {$/;"	f	class:maanet::packetQueueThread
checkSocketHandle	socket.cpp	/^	bool Socket::checkSocketHandle() {$/;"	f	class:maanet::Socket
checkTimeOut	tcpaccepter.cpp	/^	void tcpAccepter::checkTimeOut(int64_t now) {$/;"	f	class:maanet::tcpAccepter
checkTimeOut	tcpcomponent.cpp	/^	void tcpComponent::checkTimeOut(int64_t now) {$/;"	f	class:maanet::tcpComponent
clear	databuffer.h	/^	void clear() {$/;"	f	class:maanet::dataBuffer
clear	packetqueue.cpp	/^void packetQueue::clear() {$/;"	f	class:maanet::packetQueue
clearInputBuffer	tcpconnection.h	/^    void clearInputBuffer() {$/;"	f	class:maanet::tcpConnection
clearOutputBuffer	connection.h	/^    	virtual void clearOutputBuffer() {$/;"	f	class:maanet::connection
clearOutputBuffer	tcpconnection.h	/^    void clearOutputBuffer() {$/;"	f	class:maanet::tcpConnection
close	iocomponent.h	/^	virtual void close() {}$/;"	f	class:maanet::ioComponent
close	socket.cpp	/^	void Socket::close() {$/;"	f	class:maanet::Socket
close	tcpcomponent.cpp	/^	void tcpComponent::close() {$/;"	f	class:maanet::tcpComponent
connect	socket.cpp	/^	bool Socket::connect() {$/;"	f	class:maanet::Socket
connect	transport.cpp	/^	connection *transport::connect(const char *spec, packetStreamer *streamer, bool autoReconn, bool appTcp) {$/;"	f	class:maanet::transport
connection	connection.cpp	/^connection::connection(Socket *socket, packetStreamer *streamer, serverAdapter *serverAdapter_, bool appTcp) {$/;"	f	class:maanet::connection
connection	connection.h	/^class connection {$/;"	c	namespace:maanet
dataBuffer	databuffer.h	/^	dataBuffer() {$/;"	f	class:maanet::dataBuffer
dataBuffer	databuffer.h	/^class dataBuffer {$/;"	c	namespace:maanet
dataLen	packet.h	/^	uint32_t dataLen;	\/\/指令body长度$/;"	m	class:maanet::packetHeader
decode	defaultpacketstreamer.cpp	/^packet *defaultPacketStreamer::decode(dataBuffer *input, packetHeader *header) {$/;"	f	class:maanet::defaultPacketStreamer
defaultPacketStreamer	defaultpacketstreamer.cpp	/^defaultPacketStreamer::defaultPacketStreamer(packetFactory *factory) : packetStreamer(factory) {}$/;"	f	class:maanet::defaultPacketStreamer
defaultPacketStreamer	defaultpacketstreamer.h	/^class defaultPacketStreamer : public packetStreamer {$/;"	c	namespace:maanet
destroy	databuffer.h	/^	void destroy() {$/;"	f	class:maanet::dataBuffer
destroy	transport.cpp	/^	void transport::destroy() {$/;"	f	class:maanet::transport
disconnect	connection.cpp	/^void connection::disconnect() {$/;"	f	class:maanet::connection
disconnect	transport.cpp	/^	bool transport::disconnect(connection *conn) {$/;"	f	class:maanet::transport
drainData	databuffer.h	/^	void drainData(int len) {$/;"	f	class:maanet::dataBuffer
empty	packetqueue.cpp	/^bool packetQueue::empty() {$/;"	f	class:maanet::packetQueue
enableWrite	iocomponent.h	/^	void enableWrite(bool writeOn) {$/;"	f	class:maanet::ioComponent
encode	defaultpacketstreamer.cpp	/^bool defaultPacketStreamer::encode(packet *packet, dataBuffer *output) {$/;"	f	class:maanet::defaultPacketStreamer
ensureFree	databuffer.h	/^	void ensureFree(int len) {$/;"	f	class:maanet::dataBuffer
epollSocketEvent	epollsocketevent.cpp	/^	epollSocketEvent::epollSocketEvent() {$/;"	f	class:maanet::epollSocketEvent
epollSocketEvent	epollsocketevent.h	/^class epollSocketEvent : public socketEvent {$/;"	c	namespace:maanet
eventLoop	transport.cpp	/^	void transport::eventLoop(socketEvent *_socketEvent) {$/;"	f	class:maanet::transport
existPacketHeader	packetstreamer.h	/^	bool existPacketHeader() {$/;"	f	class:maanet::packetStreamer
expand	databuffer.h	/^	inline void expand(int need) {$/;"	f	class:maanet::dataBuffer
fillInt16	databuffer.h	/^	void fillInt16(unsigned char *dst, uint16_t n) {$/;"	f	class:maanet::dataBuffer
fillInt32	databuffer.h	/^	void fillInt32(unsigned char *dst, uint32_t n) {$/;"	f	class:maanet::dataBuffer
fillInt64	databuffer.h	/^	void fillInt64(unsigned char *dst, uint64_t n) {$/;"	f	class:maanet::dataBuffer
fillInt8	databuffer.h	/^	void fillInt8(unsigned char *dst, uint8_t n) {$/;"	f	class:maanet::dataBuffer
findBytes	databuffer.h	/^	int findBytes(const char *findstr, int len) {$/;"	f	class:maanet::dataBuffer
free	packet.h	/^    virtual void free() {$/;"	f	class:maanet::packet
getAddr	socket.cpp	/^	std::string Socket::getAddr() {$/;"	f	class:maanet::Socket
getConnection	tcpcomponent.h	/^	tcpConnection *getConnection() {$/;"	f	class:maanet::tcpComponent
getData	databuffer.h	/^	char *getData() {$/;"	f	class:maanet::dataBuffer
getDataLen	databuffer.h	/^	int getDataLen() {$/;"	f	class:maanet::dataBuffer
getEvents	epollsocketevent.cpp	/^	int epollSocketEvent::getEvents(int timeout, ioEvent *ioevents, int cnt) {$/;"	f	class:maanet::epollSocketEvent
getExpireTime	packet.h	/^    int64_t getExpireTime() const {$/;"	f	class:maanet::packet
getFree	databuffer.h	/^	char *getFree() {$/;"	f	class:maanet::dataBuffer
getFreeLen	databuffer.h	/^	int getFreeLen() {$/;"	f	class:maanet::dataBuffer
getId	socket.cpp	/^	uint64_t Socket::getId() {$/;"	f	class:maanet::Socket
getIoComponent	connection.h	/^    	ioComponent *getIoComponent() {$/;"	f	class:maanet::connection
getIoComponent	socket.cpp	/^	ioComponent *Socket::getIoComponent() {$/;"	f	class:maanet::Socket
getLastError	socket.h	/^	static int getLastError() {$/;"	f	class:maanet::Socket
getLastUseTime	iocomponent.h	/^	int64_t getLastUseTime() {$/;"	f	class:maanet::ioComponent
getLocalPort	connection.h	/^    	int getLocalPort() {$/;"	f	class:maanet::connection
getLocalPort	socket.cpp	/^	int Socket::getLocalPort() {$/;"	f	class:maanet::Socket
getNext	packet.h	/^    packet *getNext() const {$/;"	f	class:maanet::packet
getOwner	iocomponent.cpp	/^	transport *ioComponent::getOwner() {$/;"	f	class:maanet::ioComponent
getPacketHeader	packet.h	/^    packetHeader *getPacketHeader() {$/;"	f	class:maanet::packet
getPacketInfo	defaultpacketstreamer.cpp	/^bool defaultPacketStreamer::getPacketInfo(dataBuffer *input, packetHeader *header, bool *broken) {$/;"	f	class:maanet::defaultPacketStreamer
getPacketList	packetqueue.cpp	/^packet *packetQueue::getPacketList() {$/;"	f	class:maanet::packetQueue
getPeerId	connection.h	/^    	uint64_t getPeerId() {$/;"	f	class:maanet::connection
getPeerId	socket.cpp	/^	uint64_t Socket::getPeerId() {$/;"	f	class:maanet::Socket
getRef	iocomponent.h	/^	int getRef() {$/;"	f	class:maanet::ioComponent
getServerId	connection.h	/^    	uint64_t getServerId() {$/;"	f	class:maanet::connection
getSoError	socket.cpp	/^	int Socket::getSoError () {$/;"	f	class:maanet::Socket
getSocket	iocomponent.h	/^	Socket *getSocket() {$/;"	f	class:maanet::ioComponent
getSocketHandle	socket.cpp	/^	int Socket::getSocketHandle() {$/;"	f	class:maanet::Socket
getState	iocomponent.h	/^	int getState() {$/;"	f	class:maanet::ioComponent
getStop	transport.cpp	/^	bool* transport::getStop()$/;"	f	class:maanet::transport
getTimeoutList	packetqueue.cpp	/^packet *packetQueue::getTimeoutList(int64_t now) {$/;"	f	class:maanet::packetQueue
handleBatchPacket	serveradapter.h	/^	virtual bool handleBatchPacket(connection *_connection, packetQueue &_packetQueue) {$/;"	f	class:maanet::serverAdapter
handlePacket	connection.cpp	/^bool connection::handlePacket(dataBuffer *input, packetHeader *header){$/;"	f	class:maanet::connection
handleReadEvent	tcpaccepter.cpp	/^	bool tcpAccepter::handleReadEvent() {$/;"	f	class:maanet::tcpAccepter
handleReadEvent	tcpcomponent.cpp	/^	bool tcpComponent::handleReadEvent() {$/;"	f	class:maanet::tcpComponent
handleWriteEvent	tcpaccepter.h	/^	bool handleWriteEvent() {$/;"	f	class:maanet::tcpAccepter
handleWriteEvent	tcpcomponent.cpp	/^	bool tcpComponent::handleWriteEvent() {$/;"	f	class:maanet::tcpComponent
head	packetqueue.h	/^	packet *head()$/;"	f	class:maanet::packetQueue
head	packetqueuethread.h	/^	packet *head()$/;"	f	class:maanet::packetQueueThread
init	tcpaccepter.cpp	/^	bool tcpAccepter::init(bool isServer) {$/;"	f	class:maanet::tcpAccepter
init	tcpcomponent.cpp	/^	bool tcpComponent::init(bool isServer) {$/;"	f	class:maanet::tcpComponent
ioComponent	iocomponent.cpp	/^	ioComponent::ioComponent(transport *owner, Socket *socket){$/;"	f	class:maanet::ioComponent
ioComponent	iocomponent.h	/^class ioComponent {$/;"	c	namespace:maanet
ioEvent	socketevent.h	/^class ioEvent {$/;"	c	namespace:maanet
isAutoReconn	iocomponent.h	/^	bool isAutoReconn() {$/;"	f	class:maanet::ioComponent
isConnectState	connection.cpp	/^bool connection::isConnectState() {$/;"	f	class:maanet::connection
isConnectState	iocomponent.h	/^	bool isConnectState() {$/;"	f	class:maanet::ioComponent
isRegularPacket	packet.h	/^    virtual bool isRegularPacket() {$/;"	f	class:maanet::packet
isUsed	iocomponent.h	/^	bool isUsed() {$/;"	f	class:maanet::ioComponent
listen	serversocket.cpp	/^	bool serverSocket::listen(){$/;"	f	class:maanet::serverSocket
listen	transport.cpp	/^	ioComponent *transport::listen(const char *spec, packetStreamer *streamer, serverAdapter *_serverAdapter){$/;"	f	class:maanet::transport
maanet	connection.cpp	/^namespace maanet {$/;"	n	file:
maanet	connection.h	/^namespace maanet {$/;"	n
maanet	databuffer.h	/^namespace maanet {$/;"	n
maanet	defaultpacketstreamer.cpp	/^namespace maanet {$/;"	n	file:
maanet	defaultpacketstreamer.h	/^namespace maanet {$/;"	n
maanet	epollsocketevent.cpp	/^namespace maanet$/;"	n	file:
maanet	epollsocketevent.h	/^namespace maanet$/;"	n
maanet	iocomponent.cpp	/^namespace maanet$/;"	n	file:
maanet	iocomponent.h	/^namespace maanet$/;"	n
maanet	maanet.h	/^namespace maanet {$/;"	n
maanet	packet.cpp	/^namespace maanet {$/;"	n	file:
maanet	packet.h	/^namespace maanet {$/;"	n
maanet	packetfactory.h	/^namespace maanet {$/;"	n
maanet	packethandler.h	/^namespace maanet {$/;"	n
maanet	packetqueue.cpp	/^namespace maanet {$/;"	n	file:
maanet	packetqueue.h	/^namespace maanet {$/;"	n
maanet	packetqueuethread.cpp	/^namespace maanet {$/;"	n	file:
maanet	packetqueuethread.h	/^namespace maanet {$/;"	n
maanet	packetstreamer.h	/^namespace maanet {$/;"	n
maanet	serveradapter.h	/^namespace maanet {$/;"	n
maanet	serversocket.cpp	/^namespace maanet$/;"	n	file:
maanet	serversocket.h	/^namespace maanet $/;"	n
maanet	socket.cpp	/^namespace maanet$/;"	n	file:
maanet	socket.h	/^namespace maanet $/;"	n
maanet	socketevent.cpp	/^namespace maanet$/;"	n	file:
maanet	socketevent.h	/^namespace maanet$/;"	n
maanet	tcpaccepter.cpp	/^namespace maanet$/;"	n	file:
maanet	tcpaccepter.h	/^namespace maanet$/;"	n
maanet	tcpcomponent.cpp	/^namespace maanet$/;"	n	file:
maanet	tcpcomponent.h	/^namespace maanet$/;"	n
maanet	tcpconnection.cpp	/^namespace maanet {$/;"	n	file:
maanet	tcpconnection.h	/^namespace maanet {$/;"	n
maanet	transport.cpp	/^namespace maanet$/;"	n	file:
maanet	transport.h	/^namespace maanet$/;"	n
moveTo	packetqueue.cpp	/^void packetQueue::moveTo(packetQueue *destQueue) {$/;"	f	class:maanet::packetQueue
packet	packet.cpp	/^packet::packet() {$/;"	f	class:maanet::packet
packet	packet.h	/^class packet {$/;"	c	namespace:maanet
packetFactory	packetfactory.h	/^class packetFactory {$/;"	c	namespace:maanet
packetHandler	packethandler.h	/^class packetHandler {$/;"	c	namespace:maanet
packetHeader	packet.h	/^class packetHeader {$/;"	c	namespace:maanet
packetQueue	packetqueue.cpp	/^packetQueue::packetQueue() {$/;"	f	class:maanet::packetQueue
packetQueue	packetqueue.h	/^class packetQueue {$/;"	c	namespace:maanet
packetQueueHandler	packetqueuethread.h	/^class packetQueueHandler {$/;"	c	namespace:maanet
packetQueueThread	packetqueuethread.cpp	/^packetQueueThread::packetQueueThread() : maasys::defaultRunnable() {$/;"	f	class:maanet::packetQueueThread
packetQueueThread	packetqueuethread.cpp	/^packetQueueThread::packetQueueThread(int threadCount, packetQueueHandler *handler, void *args)$/;"	f	class:maanet::packetQueueThread
packetQueueThread	packetqueuethread.h	/^class packetQueueThread : public maasys::defaultRunnable {$/;"	c	namespace:maanet
packetStreamer	packetstreamer.h	/^	packetStreamer(packetFactory *factory) {$/;"	f	class:maanet::packetStreamer
packetStreamer	packetstreamer.h	/^    	packetStreamer() {$/;"	f	class:maanet::packetStreamer
packetStreamer	packetstreamer.h	/^class packetStreamer {$/;"	c	namespace:maanet
pattern	packetstreamer.h	/^	int pattern;			\/\/运行模式$/;"	m	class:maanet::packetStreamer
pop	packetqueue.cpp	/^packet *packetQueue::pop() {$/;"	f	class:maanet::packetQueue
postPacket	connection.cpp	/^bool connection::postPacket(packet *packet, packetHandler *_packetHandler, void *args, bool noblocking) {$/;"	f	class:maanet::connection
pourData	databuffer.h	/^	void pourData(int len) {$/;"	f	class:maanet::dataBuffer
push	packetqueue.cpp	/^void packetQueue::push(packet *_packet) {$/;"	f	class:maanet::packetQueue
push	packetqueuethread.cpp	/^bool packetQueueThread::push(packet *packet, int maxQueueLen, bool block) {$/;"	f	class:maanet::packetQueueThread
pushQueue	packetqueuethread.cpp	/^void packetQueueThread::pushQueue(packetQueue &packetQueue, int maxQueueLen) {$/;"	f	class:maanet::packetQueueThread
read	socket.cpp	/^	int Socket::read(void *data, int len) {$/;"	f	class:maanet::Socket
readBytes	databuffer.h	/^	bool readBytes(void *dst, int len) {$/;"	f	class:maanet::dataBuffer
readData	tcpconnection.cpp	/^bool tcpConnection::readData() {$/;"	f	class:maanet::tcpConnection
readInt16	databuffer.h	/^	uint16_t readInt16() {$/;"	f	class:maanet::dataBuffer
readInt32	databuffer.h	/^	uint32_t readInt32() {$/;"	f	class:maanet::dataBuffer
readInt64	databuffer.h	/^	uint64_t readInt64() {$/;"	f	class:maanet::dataBuffer
readInt8	databuffer.h	/^	uint8_t readInt8() {$/;"	f	class:maanet::dataBuffer
readString	databuffer.h	/^	bool readString(char *&str, int len) {$/;"	f	class:maanet::dataBuffer
readVector	databuffer.h	/^	bool readVector(std::vector<int32_t>& v) {$/;"	f	class:maanet::dataBuffer
readVector	databuffer.h	/^	bool readVector(std::vector<int64_t>& v) {$/;"	f	class:maanet::dataBuffer
readVector	databuffer.h	/^	bool readVector(std::vector<uint32_t>& v) {$/;"	f	class:maanet::dataBuffer
readVector	databuffer.h	/^	bool readVector(std::vector<uint64_t>& v) {$/;"	f	class:maanet::dataBuffer
removeComponent	transport.cpp	/^	void transport::removeComponent(ioComponent *ioc) {$/;"	f	class:maanet::transport
removeEvent	epollsocketevent.cpp	/^	bool epollSocketEvent::removeEvent(Socket *socket) {$/;"	f	class:maanet::epollSocketEvent
run	packetqueuethread.cpp	/^void packetQueueThread::run(maasys::cThread *thread, void *arg) {$/;"	f	class:maanet::packetQueueThread
run	transport.cpp	/^	void transport::run(maasys::cThread *thread, void *arg) {$/;"	f	class:maanet::transport
serverAdapter	serveradapter.h	/^	serverAdapter() {$/;"	f	class:maanet::serverAdapter
serverAdapter	serveradapter.h	/^class serverAdapter {$/;"	c	namespace:maanet
serverSocket	serversocket.cpp	/^	serverSocket::serverSocket(){$/;"	f	class:maanet::serverSocket
serverSocket	serversocket.h	/^class serverSocket : public Socket {$/;"	c	namespace:maanet
setAddress	socket.cpp	/^	bool Socket::setAddress(const char *address, const int port) {$/;"	f	class:maanet::Socket
setAutoReconn	iocomponent.h	/^	void setAutoReconn(bool on) {$/;"	f	class:maanet::ioComponent
setBatchPushPacket	serveradapter.h	/^	void setBatchPushPacket(bool value) {$/;"	f	class:maanet::serverAdapter
setDefaultPacketHandler	connection.h	/^	void setDefaultPacketHandler(packetHandler *ph) {$/;"	f	class:maanet::connection
setDisconnState	tcpconnection.cpp	/^void tcpConnection::setDisconnState() {$/;"	f	class:maanet::tcpConnection
setEvent	epollsocketevent.cpp	/^	bool epollSocketEvent::setEvent(Socket *socket, bool enableRead, bool enableWrite) {$/;"	f	class:maanet::epollSocketEvent
setExpireTime	packet.cpp	/^void packet::setExpireTime(int milliseconds) {$/;"	f	class:maanet::packet
setIntOption	socket.cpp	/^	bool Socket::setIntOption (int option, int value) {$/;"	f	class:maanet::Socket
setIoComponent	connection.h	/^    	void setIoComponent(ioComponent *ioc) {$/;"	f	class:maanet::connection
setIoComponent	socket.cpp	/^	void Socket::setIoComponent(ioComponent *ioc) {$/;"	f	class:maanet::Socket
setKeepAlive	socket.cpp	/^	bool Socket::setKeepAlive(bool on) {$/;"	f	class:maanet::Socket
setPacketFactory	defaultpacketstreamer.cpp	/^void defaultPacketStreamer::setPacketFactory(packetFactory *factory) {$/;"	f	class:maanet::defaultPacketStreamer
setPacketFlag	defaultpacketstreamer.cpp	/^void defaultPacketStreamer::setPacketFlag(int flag) {$/;"	f	class:maanet::defaultPacketStreamer
setPacketHeader	packet.h	/^    void setPacketHeader(packetHeader *header) {$/;"	f	class:maanet::packet
setQueueLimit	connection.h	/^    	void setQueueLimit(int limit) {$/;"	f	class:maanet::connection
setQueueTimeout	connection.h	/^    	void setQueueTimeout(int queueTimeout) {$/;"	f	class:maanet::connection
setReuseAddress	socket.cpp	/^	bool Socket::setReuseAddress(bool on){$/;"	f	class:maanet::Socket
setServer	connection.h	/^    	void setServer(bool isServer) {$/;"	f	class:maanet::connection
setSoBlocking	socket.cpp	/^	bool Socket::setSoBlocking(bool blockingEnabled) {$/;"	f	class:maanet::Socket
setSoLinger	socket.cpp	/^	bool Socket::setSoLinger(bool doLinger, int seconds){$/;"	f	class:maanet::Socket
setSocketEvent	iocomponent.h	/^	void setSocketEvent(socketEvent *socketEvent) {$/;"	f	class:maanet::ioComponent
setStatSpeed	packetqueuethread.cpp	/^void packetQueueThread::setStatSpeed() {$/;"	f	class:maanet::packetQueueThread
setTcpNoDelay	socket.cpp	/^	bool Socket::setTcpNoDelay(bool noDelay){$/;"	f	class:maanet::Socket
setTcpQuickAck	socket.cpp	/^	bool Socket::setTcpQuickAck(bool quickAck) {$/;"	f	class:maanet::Socket
setThreadParameter	packetqueuethread.cpp	/^void packetQueueThread::setThreadParameter(int threadCount,packetQueueHandler *handler, void *args) {$/;"	f	class:maanet::packetQueueThread
setUp	socket.cpp	/^	void Socket::setUp(int socketHandle, struct sockaddr *hostAddress) {$/;"	f	class:maanet::Socket
setUsed	iocomponent.h	/^	void setUsed(bool flag) {$/;"	f	class:maanet::ioComponent
setWaitTime	packetqueuethread.cpp	/^void packetQueueThread::setWaitTime(int t) {$/;"	f	class:maanet::packetQueueThread
setWriteFinishClose	connection.h	/^    	virtual void setWriteFinishClose(bool v) {$/;"	f	class:maanet::connection
setWriteFinishClose	tcpconnection.h	/^    void setWriteFinishClose(bool v) {$/;"	f	class:maanet::tcpConnection
shrink	databuffer.h	/^	void shrink() {$/;"	f	class:maanet::dataBuffer
shutdown	socket.cpp	/^	void Socket::shutdown() {$/;"	f	class:maanet::Socket
size	packetqueue.cpp	/^int packetQueue::size() {$/;"	f	class:maanet::packetQueue
size	packetqueuethread.h	/^	size_t size()$/;"	f	class:maanet::packetQueueThread
socketConnMap	transport.h	/^	std::map<int, connection *> socketConnMap; $/;"	m	class:maanet::transport
socketConnect	tcpcomponent.cpp	/^	bool tcpComponent::socketConnect() {$/;"	f	class:maanet::tcpComponent
socketEvent	socketevent.cpp	/^	socketEvent::socketEvent(){$/;"	f	class:maanet::socketEvent
socketEvent	socketevent.h	/^class socketEvent {$/;"	c	namespace:maanet
splitAddr	transport.cpp	/^	int transport::splitAddr(char *src, char **args,int cnt) {$/;"	f	class:maanet::transport
start	transport.cpp	/^	bool transport::start() {$/;"	f	class:maanet::transport
stop	packetqueuethread.cpp	/^void packetQueueThread::stop(bool waitFinish) {$/;"	f	class:maanet::packetQueueThread
stop	transport.cpp	/^	bool transport::stop() {$/;"	f	class:maanet::transport
stripData	databuffer.h	/^	void stripData(int len) {$/;"	f	class:maanet::dataBuffer
subRef	iocomponent.h	/^	void subRef() {$/;"	f	class:maanet::ioComponent
tail	packetqueue.h	/^	packet* tail()$/;"	f	class:maanet::packetQueue
tail	packetqueuethread.h	/^	packet *tail()$/;"	f	class:maanet::packetQueueThread
tcpAccepter	tcpaccepter.cpp	/^	tcpAccepter::tcpAccepter(transport *owner, Socket *socket,$/;"	f	class:maanet::tcpAccepter
tcpAccepter	tcpaccepter.h	/^class tcpAccepter : public ioComponent {$/;"	c	namespace:maanet
tcpComponent	tcpcomponent.cpp	/^	tcpComponent::tcpComponent(transport *owner, Socket *socket,$/;"	f	class:maanet::tcpComponent
tcpComponent	tcpcomponent.h	/^class tcpComponent : public ioComponent {$/;"	c	namespace:maanet
tcpConnection	tcpconnection.cpp	/^tcpConnection::tcpConnection(Socket *socket, packetStreamer *streamer,$/;"	f	class:maanet::tcpConnection
tcpConnection	tcpconnection.h	/^class tcpConnection : public connection {$/;"	c	namespace:maanet
timeoutLoop	transport.cpp	/^	void transport::timeoutLoop() {$/;"	f	class:maanet::transport
transport	transport.cpp	/^	transport::transport() {$/;"	f	class:maanet::transport
transport	transport.h	/^class transport : public maasys::runnable{$/;"	c	namespace:maanet
type	packet.h	/^	uint32_t type; 		\/\/指令类型$/;"	m	class:maanet::packetHeader
userID	connection.h	/^    	int userID;               		\/\/ user ID$/;"	m	class:maanet::connection
userID	packet.h	/^	int      userID;	\/\/用户ID$/;"	m	class:maanet::packetHeader
wait	transport.cpp	/^	bool transport::wait() {$/;"	f	class:maanet::transport
write	socket.cpp	/^	int Socket::write(const void *data, int len) {$/;"	f	class:maanet::Socket
writeBytes	databuffer.h	/^	void writeBytes(const void *src, int len) {$/;"	f	class:maanet::dataBuffer
writeData	tcpconnection.cpp	/^bool tcpConnection::writeData() {$/;"	f	class:maanet::tcpConnection
writeInt16	databuffer.h	/^	void writeInt16(uint16_t n) {$/;"	f	class:maanet::dataBuffer
writeInt32	databuffer.h	/^	void writeInt32(uint32_t n) {$/;"	f	class:maanet::dataBuffer
writeInt64	databuffer.h	/^	void writeInt64(uint64_t n) {$/;"	f	class:maanet::dataBuffer
writeInt8	databuffer.h	/^	void writeInt8(uint8_t n) {$/;"	f	class:maanet::dataBuffer
writeString	databuffer.h	/^	void writeString(const char *str) {$/;"	f	class:maanet::dataBuffer
writeString	databuffer.h	/^	void writeString(const std::string& str) {$/;"	f	class:maanet::dataBuffer
writeVector	databuffer.h	/^	void writeVector(const std::vector<int32_t>& v) {$/;"	f	class:maanet::dataBuffer
writeVector	databuffer.h	/^	void writeVector(const std::vector<int64_t>& v) {$/;"	f	class:maanet::dataBuffer
writeVector	databuffer.h	/^	void writeVector(const std::vector<uint32_t>& v) {$/;"	f	class:maanet::dataBuffer
writeVector	databuffer.h	/^	void writeVector(const std::vector<uint64_t>& v) {$/;"	f	class:maanet::dataBuffer
~Socket	socket.cpp	/^	Socket::~Socket() {$/;"	f	class:maanet::Socket
~connection	connection.cpp	/^connection::~connection() {$/;"	f	class:maanet::connection
~dataBuffer	databuffer.h	/^	~dataBuffer() {$/;"	f	class:maanet::dataBuffer
~defaultPacketStreamer	defaultpacketstreamer.cpp	/^defaultPacketStreamer::~defaultPacketStreamer() {}$/;"	f	class:maanet::defaultPacketStreamer
~epollSocketEvent	epollsocketevent.cpp	/^	epollSocketEvent::~epollSocketEvent() {$/;"	f	class:maanet::epollSocketEvent
~ioComponent	iocomponent.cpp	/^	ioComponent::~ioComponent() {$/;"	f	class:maanet::ioComponent
~packet	packet.cpp	/^packet::~packet() {$/;"	f	class:maanet::packet
~packetFactory	packetfactory.h	/^    virtual ~packetFactory() {};$/;"	f	class:maanet::packetFactory
~packetHandler	packethandler.h	/^    virtual ~packetHandler() {}$/;"	f	class:maanet::packetHandler
~packetQueue	packetqueue.cpp	/^packetQueue::~packetQueue() {$/;"	f	class:maanet::packetQueue
~packetQueueHandler	packetqueuethread.h	/^    	virtual ~packetQueueHandler() {}$/;"	f	class:maanet::packetQueueHandler
~packetQueueThread	packetqueuethread.cpp	/^packetQueueThread::~packetQueueThread() {$/;"	f	class:maanet::packetQueueThread
~packetStreamer	packetstreamer.h	/^	virtual ~packetStreamer() {}$/;"	f	class:maanet::packetStreamer
~serverAdapter	serveradapter.h	/^	virtual ~serverAdapter() {}$/;"	f	class:maanet::serverAdapter
~serverSocket	serversocket.cpp	/^	serverSocket::~serverSocket()$/;"	f	class:maanet::serverSocket
~socketEvent	socketevent.cpp	/^	socketEvent::~socketEvent(){$/;"	f	class:maanet::socketEvent
~tcpComponent	tcpcomponent.cpp	/^	tcpComponent::~tcpComponent() {$/;"	f	class:maanet::tcpComponent
~tcpConnection	tcpconnection.cpp	/^tcpConnection::~tcpConnection() {$/;"	f	class:maanet::tcpConnection
~transport	transport.cpp	/^	transport::~transport(){$/;"	f	class:maanet::transport
