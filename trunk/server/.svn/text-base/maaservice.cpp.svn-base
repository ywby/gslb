#include "define.h"

namespace maaserver {

maaService::maaService() {
	memset(&global_info, 0, sizeof(globalInformation));
}

void maaService::initHandleThreads() {
	taskQueueThread_.setThreadParameter(1, this, NULL);	
	taskQueueThread_.start();	
}

maaService::~maaService() {
}

void maaService::run(maasys::cThread *thread, void *arg) {
	std::cout<<"hello"<<endl;	
}	

maanet::packetHandler::HPRetCode maaService::handlePacket(maanet::connection *_connection, maanet::packet *_packet) {
	if (_connection == NULL || _packet == NULL) {
		return maanet::packetHandler::FREE_CHANNEL;	
	}	

	std::map<int, maanet::connection *>::iterator it_m; 
	
	message *p = dynamic_cast<message*> (_packet);
	if ( p->getMessageType() == 1) {  		//验证
		switch (global_info.pattern) {	
		case 1: {
			if (_connection->_gotFirst) {
				_connection->_gotFirst = false;	

				(p->_packetHeader).userID = _connection->_socket->_socketHandle;
				_connection->appID   = (p->_packetHeader).appID;
				_connection->userID  = (p->_packetHeader).userID;
				
				p->setConnection(_connection);
				taskQueueThread_.push( p );	
				MAASYS_LOG(DEBUG, "header: type =%d, datalen =%d,appID =%d, userID =%d, raw_data_ =%s", (p->_packetHeader).type, (p->_packetHeader).dataLen,(p->_packetHeader).appID,(p->_packetHeader).userID, p->raw_data_);	
				
				//可以放在线程完成查找,提高效率	
				it_m = appidTcpMap.find(_connection->appID); 
				if (it_m != appidTcpMap.end()) {	
					//p->setConnection(it_m->second);
					//taskQueueThread_.push( p );	
				} else {
					MAASYS_LOG(ERROR, "appid = %d, but not exist", _connection->appID);	
				}	
			}
			break;
		}
		case 2: {
			break;
		}
		case 3: {
			if (_connection->_gotFirst) {
				_connection->_gotFirst = false;	

				p->setConnection(_connection );
				appidTcpMap.insert(std::map<int , maanet::connection * >::value_type(p->getAppID(),_connection)); 
				taskQueueThread_.push( p );	
			}	
			break;	
		}
		default : {
			std::cout<<"error"<<endl;	
			break;	
		}	
		}	
	} else if (p->getMessageType() == 2) { 	
		switch (global_info.pattern) {
		case 1: {
			it_m = appidTcpMap.find(_connection->appID);
			if (it_m != appidTcpMap.end()) {	
				p->setConnection(it_m->second);
				taskQueueThread_.push( p );	
			} else {
				std::cout << "not exist appid" <<endl;	
			}	
			break;	
		}
		case 2: {		
			break;	
		}
		case 3: {
			it_m = transport_.socketConnMap.find(p->getUserID());
			if (it_m != transport_.socketConnMap.end()) {	
				p->setConnection(it_m->second);
				taskQueueThread_.push( p );	
			} else {
				std::cout << "not exist appid" <<endl;	
			}	
			break;	
		}
		default: {
			std::cout<<"error"<<std::endl;	
			break;	
		}
		}	
	} else if (p->getMessageType() == 3) { 
		switch (global_info.pattern) {
		case 1: {
			it_m = transport_.socketConnMap.find(p->getUserID());
			if (it_m != transport_.socketConnMap.end()) {			
				p->setConnection(it_m->second);
				taskQueueThread_.push( p );	
			}	
			break;	
		}
		case 2: {
			break;
		}
		case 3: {
			it_m = appidTcpMap.find(p->getAppID());
			if (it_m != appidTcpMap.end()){
				p->setConnection(it_m->second);
				taskQueueThread_.push( p );	
			} else {
				std::cout<<"error"<<std::endl;	
			}	
			break;	
		}
		default	: {
			std::cout<<"error"<<std::endl;	
			break;	
		}
		}
	} else { 
		std::cout << "msg error" <<std::endl;	
	}
	
	return maanet::packetHandler::KEEP_CHANNEL;	
}	
	
bool maaService::handlePacketQueue(maanet::packet *_packet,void *) {
  	bool  ret = true;
  	
	std::map<int, char *>::iterator it_m;
	std::map<char *, maanet::connection *>::iterator it_n;

	message* _message = dynamic_cast<message*>(_packet); 
	if (NULL == _message) {
		MAASYS_LOG(ERROR, "process packet can convert to message\n");
		return true;
	}

	switch (_message->getMessageType()) {
	case 1:{ 
		switch (global_info.pattern) {
		case 1: {
			_message->replyMessage(_message);
			break;
		} 	
		case 2: {
			break;	
		}
		case 3: {
			//与源建立连接
			maanet::connection *oldConn =  _message->getConnection();	

			it_m = appidSourceMap.find(_message->getAppID());	
			if (it_m != appidSourceMap.end()) {
				maanet::connection *_conn = transport_.connect(it_m->second, &streamer_, false, false); 
				if (_conn != NULL) {
					_conn->userID = _message->getUserID();	
					_conn->appID = _message->getAppID();	

					transport_.socketConnMap.insert(map<int ,maanet::connection *>::value_type(_message->getUserID(),oldConn));	
				} else {
					std::cout<< "error" <<endl;	
				}	
			}	
			break;	
		}
		}
		break;	
	}	
	case 2: {
		switch (global_info.pattern) {	
		case 1:	{
			_message->replyMessage(_message);
			break;	
		}		
		case 2: {	
			break;
		}	
		case 3: {
			_message->replyMessage(_message);
			break;
		}	
		default : {
			break;	
		}	
		}	
		break;
	}	
	case 3: {
		switch (global_info.pattern) {
		case 1:
			_message->replyMessage(_message);
			break;
		case 2:
			break;
		case 3:
			break;
		default :
			break;
		}	
		break;
	}	
	default: {
		MAASYS_LOG(ERROR, "process packet: AppID %d, UserID %d, type: %d\n", 
			   _message->getAppID(), _message->getUserID(), _message->getMessageType());
		ret = false;
		break;
	}	
	}

	return ret;
}

int maaService::initGlobalInfo() {
	int  pattern = CONFIG.get_int_value(CONFIG_SERVER_INT, "pattern", 0);
	char *ip = CONFIG.get_string_value(CONFIG_SERVER_INT, "ip", NULL);
	int32_t port = CONFIG.get_int_value(CONFIG_SERVER_INT, "port", 0);

	if (ip == NULL || port <= 0 || (pattern != 1 && pattern != 2 && pattern != 3)){
		return MAA_ERROR;	
	}	
	
	sprintf(global_info.ipPort, "tcp:%s:%d", ip,port);
	global_info.pattern = streamer_.pattern =  pattern;	
	global_info.configServerMap = CONFIG.getConfigMap(CONFIG_SERVER_INT);
	global_info.configAppMap = CONFIG.getConfigMap(CONFIG_APP_INT);
	
	return MAA_SUCCESS;
}

int maaService::start() {
	int ret = MAA_SUCCESS;
	int  appID;
	char spec[32];
		
	if (initGlobalInfo() != MAA_SUCCESS) {
		MAASYS_LOG(ERROR,"initGlobalInfo() is error");	
		return MAA_ERROR;
	}
	
	//监听
	if (transport_.listen(global_info.ipPort, &streamer_, this) == NULL) {
		MAASYS_LOG(ERROR,"listen address %s", global_info.ipPort) ;
		return MAA_ERROR;
	}

	//任务处理线程
	initHandleThreads();

	//连接上级节点
	maanet::connection *_conn = NULL; 
	STRING_MAP_ITER it;
	STRING_MAP m = global_info.configAppMap;	

	for (it = m.begin(); it != m.end(); it++) {
		appID = atoi(it->first.c_str());
		sprintf(spec, "tcp:%s", it->second.c_str());

		if (global_info.pattern == 1 || global_info.pattern == 2) {	
			_conn = transport_.connect(spec, &streamer_, true, true); 

			if (_conn != NULL) {
				appidTcpMap.insert(map<int,maanet::connection *>::value_type(appID,_conn));
				MAASYS_LOG(DEBUG,"TCP connet to success : appID =%d, spec =%s", appID, spec);	
			} else {
				MAASYS_LOG(ERROR,"TCP connet to error : appID =%d, spec =%s", appID, spec);	
			}
		} else if (global_info.pattern == 3) {
			appidSourceMap.insert(map<int,char *>::value_type(appID,spec));		
		} else {
			MAASYS_LOG(ERROR,"maaService pattern is error : pattern = %d", global_info.pattern);	
		}
	}	

	transport_.start();

	return ret;
}

int maaService::stop() {
	int ret = 0;	

	transport_.stop();

	return ret;	
}

int maaService::wait() {
	int ret = 0;

	taskQueueThread_.wait();
	transport_.wait();

	return ret;		
}	

}//namespace maaserver
 
